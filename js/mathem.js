// Generated by CoffeeScript 1.3.3
(function(a){a.fn.extend({outerHTML:function(b){if(!this.length)return null;else if(b===undefined){var c=this.length?this[0]:this,d;if(c.outerHTML)d=c.outerHTML;else d=a(document.createElement("div")).append(a(c).clone()).html();if(typeof d==="string")d=a.trim(d);return d}else if(a.isFunction(b)){this.each(function(c){var d=a(this);d.outerHTML(b.call(this,c,d.outerHTML()))})}else{var e=a(this),f=[],g=a(b),h;for(var i=0;i<e.length;i++){h=g.clone(true);e.eq(i).replaceWith(h);for(var j=0;j<h.length;j++)f.push(h[j])}return f.length?a(f):null}}})})(jQuery);;

var Category, Mathem, Section, SectionStep, categories, category, index, name, section, sectionsData, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;

String.prototype.slugify = function() {
  return this.trim().replace(/[\s,']+/g, '-').toLowerCase();
};

String.prototype.unSelectorize = function() {
  return this.replace('#', '');
};

Mathem = {};

SectionStep = (function() {

  SectionStep.template = ['<li class="step clearfix" id="{{slug}}">', '<div class="index">Step {{id}}.</div>', '<div class="title">{{text}}</div>', '<div class="result {{plain}}">{{{result}}}</div>', '</li>'].join('');

  function SectionStep(id, text, result, plain) {
    this.id = id;
    this.text = text;
    this.result = result;
    this.plain = plain;
    this.slug = this.id;
    this.plain = this.plain ? 'plain' : 'math';
  }

  SectionStep.prototype.setSection = function(section) {
    this.section = section;
    return this.slug = this.section.slug + '-' + this.slug;
  };

  SectionStep.prototype.render = function() {
    var template;
    template = Hogan.compile(SectionStep.template);
    this.markup = template.render({
      id: this.id,
      slug: this.slug,
      text: this.text,
      result: this.result,
      plain: this.plain
    });
    return this.markup;
  };

  SectionStep.prototype.selector = function() {
    return '#' + this.slug;
  };

  return SectionStep;

})();

Section = (function() {

  Section.template = ['<section class="tab-pane section" id="{{slug}}">', '<h2>{{title}}</h2>', '<p class="lead">{{description}}<br />', '<strong>Example:</strong> <span class="example math">{{example}}</span>', '</p>', '<hr>', '<ol class="steps unstyled">', '</ol></section>'].join('');

  function Section(id, title, description, example, stepsArray) {
    this.id = id;
    this.title = title;
    this.description = description;
    this.example = example;
    this.stepsArray = stepsArray;
    this.slug = this.title.slugify();
    this.steps = [];
    this.template = Section.template;
  }

  Section.prototype.initialize = function() {
    this.addSteps(this.stepsArray);
    this.render();
    return this;
  };

  Section.prototype.setCategory = function(category) {
    this.category = category;
    this.slug = this.category.slug + '-' + this.slug;
    return this.render();
  };

  Section.prototype.addStep = function(step) {
    var stepObj;
    stepObj = new SectionStep(this.steps.length + 1, step.text, step.result, step.plain);
    stepObj.setSection(this);
    return this.steps.push(stepObj);
  };

  Section.prototype.addSteps = function(steps) {
    var step, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = steps.length; _i < _len; _i++) {
      step = steps[_i];
      _results.push(this.addStep(step));
    }
    return _results;
  };

  Section.prototype.getSteps = function() {
    return this.steps;
  };

  Section.prototype.render = function() {
    var template;
    template = Hogan.compile(Section.template);
    this.markup = template.render({
      slug: this.slug,
      title: this.title,
      description: this.description,
      example: this.example
    });
    return this.markup;
  };

  Section.prototype.selector = function() {
    return '#' + this.slug;
  };

  return Section;

})();

Category = (function() {

  function Category(id, name) {
    this.id = id;
    this.name = name;
    this.slug = this.name.slugify();
    this.sections = [];
  }

  Category.prototype.addSection = function(section) {
    var sectionObj;
    sectionObj = new Section(this.sections.length + 1, section.title, section.description, section.example, section.steps);
    sectionObj.setCategory(this);
    return this.sections.push(sectionObj.initialize());
  };

  Category.prototype.getSections = function() {
    return this.sections;
  };

  Category.prototype.getSection = function(name) {
    var found, section, _i, _len, _ref;
    _ref = this.sections;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      section = _ref[_i];
      if (section.match(name)) {
        found = section;
      }
    }
    return found;
  };

  Category.prototype.match = function(search) {
    if (this.slug === search || this.name === search || this.id === search || this.selector() === search) {
      return true;
    }
    return false;
  };

  Category.prototype.selector = function() {
    return '#' + this.slug;
  };

  return Category;

})();

categories = ['Standard', 'Turbo Boost', 'Divisiblity', 'Perfect Squares', 'Casting Out Nines', 'Casting Out Elevens'];

Mathem.categories = [];

for (index = _i = 0, _len = categories.length; _i < _len; index = ++_i) {
  name = categories[index];
  Mathem.categories.push(new Category(++index, name));
}

sectionsData = {
  'standard': [
    {
      title: 'Multiply as high as 19x19',
      description: 'Quickly multiply any two two-digit numbers up to 19 x 19',
      example: '17 x 12 = 204',
      steps: [
        {
          text: "Add the one's place digit form the smaller number to the larger number.",
          result: "17 + 2 = 19"
        }, {
          text: "Add a zero to the end.",
          result: "\"19\" + \"0\" = 190",
          plain: true
        }, {
          text: "Multiply the one's place digit of the two numbers.",
          result: "7 x 2 = 14"
        }, {
          text: "Add the results of steps 2 and 3 for the answer.",
          result: "190 + 14 = 204"
        }
      ]
    }, {
      title: 'Foobar',
      description: 'Barfoo',
      example: 'barf lol + 1',
      steps: []
    }
  ]
};

_ref = Mathem.categories;
for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
  category = _ref[_j];
  sectionsData[category.slug] = sectionsData[category.slug] || [];
  _ref1 = sectionsData[category.slug];
  for (index = _k = 0, _len2 = _ref1.length; _k < _len2; index = ++_k) {
    section = _ref1[index];
    category.addSection(section);
  }
}

Mathem.getCategory = function(category) {
  var _l, _len3, _ref2;
  _ref2 = Mathem.categories;
  for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
    category = _ref2[_l];
    if (category.match(category) != null) {
      return category;
    }
  }
};

Mathem.CategoryLinkTemplate = Hogan.compile('<li><a href="{{selector}}" data-toggle="tab">{{name}}</a></li>');

Mathem.CategoryTemplate = Hogan.compile('<div class="span12 tab-pane primary-tab" id="{{slug}}"><div class="tabbable tabs-left"><div class="span3"><ul class="nav nav-pills nav-stacked"></ul></div><div class="span9"><div class="tab-content"></div></div></div></div>');

Mathem.SectionLinkTemplate = Hogan.compile('<li><a href="{{selector}}" data-toggle="tab">{{title}} <i class="icon-chevron-right"></i></a></li>');

Mathem.initialize = function() {
  var categoryContainer, categoryContentContainer, categoryNav, categorySectionContainer, categorySectionNav, categorySectionStepsContainer, step, _l, _len3, _len4, _len5, _m, _n, _ref2, _ref3, _ref4;
  categoryNav = $('#category-nav');
  categoryContainer = $('#categories-container');
  _ref2 = Mathem.categories;
  for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
    category = _ref2[_l];
    categoryNav.append(Mathem.CategoryLinkTemplate.render({
      selector: category.selector(),
      name: category.name
    }));
    categoryContainer.append(Mathem.CategoryTemplate.render({
      slug: category.slug
    }));
    categoryContentContainer = $(category.selector());
    categorySectionNav = categoryContentContainer.find('ul.nav');
    categorySectionContainer = categoryContentContainer.find('div.tab-content');
    _ref3 = category.getSections();
    for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
      section = _ref3[_m];
      categorySectionNav.append(Mathem.SectionLinkTemplate.render({
        selector: section.selector(),
        title: section.title
      }));
      categorySectionContainer.append(section.render());
      categorySectionStepsContainer = categoryContainer.find(section.selector()).find('.steps');
      _ref4 = section.getSteps();
      for (_n = 0, _len5 = _ref4.length; _n < _len5; _n++) {
        step = _ref4[_n];
        categorySectionStepsContainer.append(step.render());
      }
    }
  }
  categoryNav.on('click', 'a', function(e) {
    category = Mathem.getCategory($(this).attr('href'));
    return ($("a[href=" + (category.getSections()[0].selector()) + "]")).click();
  });
  return null;
};
